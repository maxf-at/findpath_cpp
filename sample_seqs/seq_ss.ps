%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.15
%%CreationDate: Sun Sep 20 15:09:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACGAGACUACUCAUGCACAUAAGGAAGGUUAUCGCCAUAGACAUGGCGCGGCAGCGCAGAAUGUUUAAAUCUAAAUCUGGUAUGGGAGGCGUGCCC\
) } def
/len { sequence length } bind def

/coor [
[63.71128082 413.64617920]
[53.63443756 401.96453857]
[51.49545670 386.68615723]
[57.97687912 372.68634033]
[71.01050568 364.43237305]
[71.01050568 349.43237305]
[71.01050568 334.43237305]
[63.01826096 327.72415161]
[60.06920242 317.48416138]
[63.40503311 307.13027954]
[72.12555695 300.26309204]
[73.05810547 285.29211426]
[70.28335571 278.29736328]
[74.25960541 269.87228394]
[75.65729523 254.93754578]
[77.05498505 240.00280762]
[78.45267487 225.06806946]
[79.85036469 210.13333130]
[81.24804688 195.19859314]
[82.64573669 180.26385498]
[80.08986664 173.18620300]
[84.32621002 164.88885498]
[86.18769836 150.00480652]
[75.41447449 145.68164062]
[65.87225342 139.07118225]
[58.03881836 130.50442505]
[52.30638885 120.41029358]
[48.96199417 109.29421997]
[48.17308044 97.71278381]
[49.97916031 86.24586487]
[54.28979111 75.46762085]
[42.23733902 66.53798676]
[30.18488312 57.60835648]
[13.83957100 56.28065109]
[7.06220913 41.34748459]
[16.82476616 28.17082024]
[33.08436203 30.30567741]
[39.11451721 45.55590057]
[51.16696930 54.48553467]
[63.21942520 63.41516495]
[85.66619110 50.14217377]
[111.73484039 49.46729660]
[117.20461273 35.50013351]
[122.67438507 21.53297234]
[128.14416504 7.56581211]
[133.61393738 -6.40134859]
[139.08370972 -20.36850929]
[144.55348206 -34.33567047]
[140.48770142 -53.95846176]
[155.75975037 -65.64510345]
[160.35060120 -79.92530060]
[164.94146729 -94.20549774]
[169.53231812 -108.48569489]
[165.54585266 -124.39292145]
[177.51525879 -135.60296631]
[193.12747192 -130.58389282]
[196.32196045 -114.49888611]
[183.81251526 -103.89482880]
[179.22166443 -89.61463928]
[174.63079834 -75.33444214]
[170.03994751 -61.05424118]
[175.59556580 -52.22184372]
[175.26908875 -41.57065964]
[168.92445374 -32.73457718]
[158.52064514 -28.86589813]
[153.05087280 -14.89873695]
[147.58110046 -0.93157572]
[142.11132812 13.03558540]
[136.64155579 27.00274658]
[131.17176819 40.96990585]
[125.70200348 54.93706894]
[135.54862976 62.21699142]
[143.41453552 71.60213470]
[148.86145020 82.56956482]
[151.58586121 94.50819397]
[151.43597412 106.75282288]
[148.42016602 118.62118530]
[142.70643616 129.45201111]
[134.61317444 138.64179993]
[124.59130859 145.67852783]
[113.19924927 150.17012024]
[101.07173920 151.86628723]
[99.21025848 166.75033569]
[97.58048248 181.66152954]
[96.18279266 196.59628296]
[94.78510284 211.53102112]
[93.38741302 226.46575928]
[91.98972321 241.40049744]
[90.59203339 256.33523560]
[89.19434357 271.26998901]
[88.02909088 286.22463989]
[87.09654236 301.19561768]
[96.97290802 318.63241577]
[86.01050568 334.43237305]
[86.01050568 349.43237305]
[86.01050568 364.43237305]
[99.04413605 372.68634033]
[105.52555847 386.68615723]
[103.38657379 401.96453857]
[93.30973053 413.64617920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 96]
[6 95]
[7 94]
[11 92]
[12 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[22 83]
[23 82]
[31 40]
[32 39]
[33 38]
[42 71]
[43 70]
[44 69]
[45 68]
[46 67]
[47 66]
[48 65]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
