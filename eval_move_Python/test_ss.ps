%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.18
%%CreationDate: Wed Oct 13 17:11:52 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUAAUGUACCGGACAUUCGCGCACGACCACCAUAUGGCAGAGCAUGU\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[125.00000000 100.00000000]
[150.00000000 100.00000000]
[175.00000000 100.00000000]
[200.00000000 100.00000000]
[225.00000000 100.00000000]
[225.00000000 125.00000000]
[225.00000000 150.00000000]
[225.00000000 175.00000000]
[225.00000000 200.00000000]
[212.17903137 221.46212769]
[219.69174194 245.30661011]
[242.50000000 255.54298401]
[265.30825806 245.30661011]
[272.82095337 221.46212769]
[260.00000000 200.00000000]
[260.00000000 175.00000000]
[260.00000000 150.00000000]
[260.00000000 125.00000000]
[260.00000000 100.00000000]
[285.00000000 100.00000000]
[310.00000000 100.00000000]
[335.00000000 100.00000000]
[360.00000000 100.00000000]
[360.00000000 125.00000000]
[349.02532959 147.46234131]
[360.00000000 169.92468262]
[343.72460938 188.90129089]
[343.72460938 213.90129089]
[360.00000000 232.87789917]
[360.00000000 257.87789917]
[360.00000000 282.87789917]
[347.17904663 304.34002686]
[354.69174194 328.18450928]
[377.50000000 338.42086792]
[400.30825806 328.18450928]
[407.82095337 304.34002686]
[395.00000000 282.87789917]
[395.00000000 257.87789917]
[395.00000000 232.87789917]
[411.27539062 213.90129089]
[411.27539062 188.90129089]
[395.00000000 169.92468262]
[405.97467041 147.46234131]
[395.00000000 125.00000000]
[395.00000000 100.00000000]
[420.00000000 100.00000000]
[445.00000000 100.00000000]
[470.00000000 100.00000000]
[495.00000000 100.00000000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[242.50000000 225.01461919 30.52836670 235.02371410 186.68247606 1.00000000]
[242.50000000 225.01461919 30.52836670 186.68247606 138.34123803 1.00000000]
[242.50000000 225.01461919 30.52836670 138.34123803 90.00000000 1.00000000]
[242.50000000 225.01461919 30.52836670 90.00000000 41.65876197 1.00000000]
[242.50000000 225.01461919 30.52836670 41.65876197 353.31752394 1.00000000]
[242.50000000 225.01461919 30.52836670 353.31752394 304.97628590 1.00000000]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[377.49999988 147.46233915 28.47466717 232.07849217 180.00000000 1.00000000]
[377.49999988 147.46233915 28.47466717 180.00000000 127.92150793 1.00000000]
[377.50000004 201.40128744 36.01426010 240.92732373 200.30910788 1.00000000]
[377.50000004 201.40128744 36.01426010 200.30910788 159.69089203 1.00000000]
[377.50000004 201.40128744 36.01426010 159.69089203 119.07267617 1.00000000]
[]
[]
[377.49999988 307.89251612 30.52836647 235.02371468 186.68247649 1.00000000]
[377.49999988 307.89251612 30.52836647 186.68247649 138.34123798 1.00000000]
[377.49999988 307.89251612 30.52836647 138.34123798 89.99999948 1.00000000]
[377.49999988 307.89251612 30.52836647 89.99999948 41.65876129 1.00000000]
[377.49999988 307.89251612 30.52836647 41.65876129 353.31752352 1.00000000]
[377.49999988 307.89251612 30.52836647 353.31752352 304.97628601 1.00000000]
[]
[]
[377.50000004 201.40128744 36.01426010 60.92732373 20.30910788 1.00000000]
[377.50000004 201.40128744 36.01426010 20.30910788 339.69089203 1.00000000]
[377.50000004 201.40128744 36.01426010 339.69089203 299.07267617 1.00000000]
[377.49999988 147.46233915 28.47466717 52.07849159 360.00000000 1.00000000]
[377.49999988 147.46233915 28.47466717 360.00000000 307.92150812 1.00000000]
[]
[]
[]
[]
[]
] def
/pairs [
[6 20]
[7 19]
[8 18]
[9 17]
[10 16]
[24 46]
[25 45]
[27 43]
[30 40]
[31 39]
[32 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
