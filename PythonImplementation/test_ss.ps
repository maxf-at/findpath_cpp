%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Sat Dec 11 00:00:02 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUUGUUGUCGCGGAUGAAUAAGUUGAUUAAAUAACGUGAUGAUCCUAUAAGUCGUUGCACAUAGACUCCGCAUCGCGAUUAGCAGAAACUAUGGUC\
) } def
/len { sequence length } bind def

/coor [
[100.00000000 100.00000000]
[115.00000000 100.00000000]
[119.87049103 85.81273651]
[120.11849213 70.81478882]
[115.71973419 56.47425461]
[111.32097626 42.13372040]
[106.92221832 27.79318619]
[102.52346039 13.45265198]
[98.12470245 -0.88788134]
[87.14499664 -11.10776424]
[90.50582123 -25.72641182]
[86.10704803 -40.06694412]
[77.49210358 -52.34630585]
[86.50830841 -64.33413696]
[91.37878418 -78.52140045]
[96.24925995 -92.70866394]
[101.11972809 -106.89592743]
[105.99019623 -121.08319092]
[93.86882782 -129.91905212]
[84.89038849 -141.93519592]
[79.85265350 -156.06393433]
[79.20325470 -171.04986572]
[82.99988556 -185.56143188]
[90.90520477 -198.30921936]
[102.21678162 -208.16052246]
[115.92954254 -214.24002075]
[114.16204834 -229.13552856]
[112.39455414 -244.03103638]
[110.62705994 -258.92654419]
[98.84454346 -268.20944214]
[97.07704163 -283.10494995]
[106.35993958 -294.88748169]
[121.25543976 -296.65496826]
[133.03796387 -287.37207031]
[134.80546570 -272.47656250]
[125.52256775 -260.69403076]
[127.29006958 -245.79852295]
[129.05757141 -230.90301514]
[130.82507324 -216.00750732]
[145.57978821 -213.30596924]
[152.51033020 -226.60888672]
[159.44087219 -239.91180420]
[166.37141418 -253.21472168]
[173.30195618 -266.51763916]
[180.23249817 -279.82055664]
[187.16304016 -293.12347412]
[194.09358215 -306.42639160]
[188.35781860 -320.28643799]
[192.87303162 -334.59072876]
[205.52651978 -342.64611816]
[220.39755249 -340.68341064]
[230.52781677 -329.62097168]
[231.17726135 -314.63504028]
[222.04199219 -302.73770142]
[207.39649963 -299.49584961]
[200.46595764 -286.19293213]
[193.53541565 -272.89001465]
[186.60487366 -259.58709717]
[179.67433167 -246.28417969]
[172.74378967 -232.98126221]
[165.81324768 -219.67834473]
[158.88270569 -206.37542725]
[169.55180359 -195.83169556]
[176.63908386 -182.61161804]
[179.51481628 -167.88986206]
[177.92346191 -152.97451782]
[172.00643921 -139.19087219]
[162.28948975 -127.76367188]
[149.63601685 -119.70826721]
[135.17031860 -115.74042511]
[120.17775726 -116.21269989]
[115.30733490 -102.02542114]
[110.43691254 -87.83814240]
[105.56649017 -73.65085602]
[100.69606781 -59.46357346]
[100.44813538 -44.46562195]
[104.84696198 -30.12510681]
[115.82671356 -19.90527153]
[112.46595001 -5.28660917]
[116.86478424 9.05390263]
[121.26361847 23.39441490]
[125.66245270 37.73492432]
[130.06129456 52.07543564]
[134.46012878 66.41594696]
[143.07513428 78.69526672]
[134.05899048 90.68314362]
[129.18858337 104.87042999]
[141.02575684 114.08354187]
[149.23005676 126.64098358]
[152.91242981 141.18196106]
[151.67384338 156.13073730]
[145.64849854 169.86738586]
[135.48934937 180.90332031]
[122.29729462 188.04261780]
[107.50189209 190.51164246]
[92.70645905 188.04283142]
[79.51430511 180.90371704]
[69.35500336 169.86793518]
[63.32947540 156.13137817]
[62.09067917 141.18261719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 87]
[3 86]
[4 84]
[5 83]
[6 82]
[7 81]
[8 80]
[9 79]
[11 77]
[12 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[26 39]
[27 38]
[28 37]
[29 36]
[40 62]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[46 56]
[47 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
